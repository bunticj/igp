services:
  database:
    image: postgres:14-alpine
    container_name: database
    ports:
      - "${DB_PORT}:${DB_PORT}"
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      retries: 3
      start_period: 5s
      timeout: 10s

  migration-service:
    build:
      context: ./
      dockerfile: ./migration-service/Dockerfile
    container_name: migration-service
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DEFAULT_ADMIN: ${DEFAULT_ADMIN}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD}
    depends_on:
      database:
        condition: service_healthy

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    healthcheck:
      test: nc -z zookeeper ${ZOOKEEPER_PORT} || exit -1
      start_period: 5s
      interval: 20s
      timeout: 5s
      retries: 3

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME}
      KAFKA_LISTENER_SECURITY_PROTOCOL: ${KAFKA_LISTENER_SECURITY_PROTOCOL}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT}
      KAFKA_CREATE_TOPICS: ${KAFKA_CREATE_TOPICS}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "kafka", "${KAFKA_PORT}"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  auth-service:
    build:
      context: ./
      dockerfile: ./auth-service/Dockerfile
    container_name: auth-service
    ports:
      - "${AUTH_SERVER_PORT}:${AUTH_SERVER_PORT}"
    environment:
      AUTH_SERVER_PORT: ${AUTH_SERVER_PORT}
      AUTH_SERVER_HOST: ${AUTH_SERVER_HOST}
      HTTP_PROTOCOL_TYPE: ${HTTP_PROTOCOL_TYPE}
      VERBOSE_LOGS: ${VERBOSE_LOGS}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      PROMOTION_SERVER_PORT: ${PROMOTION_SERVER_PORT}
      PROMOTION_SERVER_HOST: promotion-service
    depends_on:
      database:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "${HTTP_PROTOCOL_TYPE}://${AUTH_SERVER_HOST}:${AUTH_SERVER_PORT}/health"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  promotion-service:
    build:
      context: ./
      dockerfile: ./promotion-service/Dockerfile
    container_name: promotion-service
    ports:
      - "${PROMOTION_SERVER_PORT}:${PROMOTION_SERVER_PORT}"
    environment:
      PROMOTION_SERVER_PORT: ${PROMOTION_SERVER_PORT}
      PROMOTION_SERVER_HOST: ${PROMOTION_SERVER_HOST}
      HTTP_PROTOCOL_TYPE: ${HTTP_PROTOCOL_TYPE}
      VERBOSE_LOGS: ${VERBOSE_LOGS}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      database:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "${HTTP_PROTOCOL_TYPE}://${PROMOTION_SERVER_HOST}:${PROMOTION_SERVER_PORT}/health"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  notification-service:
    build:
      context: ./
      dockerfile: ./notification-service/Dockerfile
    container_name: notification-service
    ports:
      - "${NOTIFICATION_PORT}:${NOTIFICATION_PORT}"
    environment:
      NOTIFICATION_PORT: ${NOTIFICATION_PORT}
      NOTIFICATION_HOST: ${NOTIFICATION_HOST}
      HTTP_PROTOCOL_TYPE: ${HTTP_PROTOCOL_TYPE}
      VERBOSE_LOGS: ${VERBOSE_LOGS}
      KAFKA_TOPIC_NAME: ${KAFKA_TOPIC_NAME}
      KAFKA_PORT: ${KAFKA_PORT}
      KAFKA_HOST: ${KAFKA_ADVERTISED_HOST_NAME}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "${HTTP_PROTOCOL_TYPE}://${NOTIFICATION_HOST}:${NOTIFICATION_PORT}/health"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

networks:
  default:
    driver: bridge
