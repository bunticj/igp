services:
  database:
    image: postgres:14-alpine
    container_name: database
    ports:
      - "${DB_PORT}:${DB_PORT}"
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      retries: 3
      start_period: 20s
      timeout: 10s

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
    - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
  
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}" 
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME}
      KAFKA_LISTENER_SECURITY_PROTOCOL: ${KAFKA_LISTENER_SECURITY_PROTOCOL}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_CREATE_TOPICS: ${KAFKA_CREATE_TOPICS}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--zookeeper", "${KAFKA_ZOOKEEPER_CONNECT}", "--list"]
      interval: 30s
      retries: 3
      start_period: 40s
      timeout: 10s

  notification-service:
    build:
      context: ./
      dockerfile: ./notification-service/Dockerfile
    container_name: notification-service
    ports: 
      - "${NOTIFICATION_PORT}:${NOTIFICATION_PORT}"
    environment:
      NOTIFICATION_PORT: ${NOTIFICATION_PORT}
      NOTIFICATION_HOST: ${NOTIFICATION_HOST}
      HTTP_PROTOCOL_TYPE: ${HTTP_PROTOCOL_TYPE}
      VERBOSE_LOGS: ${VERBOSE_LOGS}
      KAFKA_TOPIC_NAME: ${KAFKA_TOPIC_NAME}
      KAFKA_PORT: ${KAFKA_PORT}
      KAFKA_HOST: ${KAFKA_ADVERTISED_HOST_NAME}
    depends_on:
      - kafka
    restart: on-failure

networks:
  default:
    driver: bridge